<!DOCTYPE html>
<html lang="zh-TW">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1" />
	<link rel="shortcut icon" href="#"/>
	<title>📦 Vue3 訂單寫入</title>
	<meta name="description" content="Vue3 訂單系統，連接 Google Sheet 建立表單訂單">
	<meta property="og:image" content="https://tainmail.github.io/vue_gs_gsheet/images/preview.jpg">

	<!--Bootstrap-->
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

	<style>
	@import url(https://fonts.googleapis.com/earlyaccess/notosanstc.css);
	*{font-family:'Noto Sans TC','微軟正黑體';}
	html, body {
	overscroll-behavior-y: contain; /* 阻止下拉刷新 */
	overscroll-behavior-x: none;    /* 禁止水平彈跳 */
	-webkit-overflow-scrolling: touch; /* 保留慣性滑動 */
	}
	</style>

</head>

<body>

	<!--應用程式 開始-->
	<div id="app" class="wrapper_box container p-1" style="max-width:768px;">

		<!--header_box 開始-->
		<div class="header_box p-2" v-if="gSheetData.noteList.length > 0">
			<h1 class="d-flex align-items-center text-primary">
				<i class="bi bi-box-seam me-2 fs-2 "></i>
				{{ gSheetData.noteList[0]['TITLE_1'] }}
			  </h1>
			<h6 class="text-success">您好~ {{ userForm.chain }}{{ userForm.shop }} {{ userForm.buyer }}</h6>
			<p class="mb-0">{{gSheetData.noteList[0]['NOTE_1']}}</p>
			<p class="mb-0">{{gSheetData.noteList[0]['NOTE_2']}}</p>
			<p class="mb-0" v-html="gSheetData.noteList[0]['NOTE_3']"></p>
			
		</div>
		<!--header_box 結束-->

		<!--體系店名 開始-->
		<div v-if="gSheetData.chainList.length > 0" class="border rounded px-2 py-3 mb-3">
			<h4 class="bg-primary text-white fs-6 px-3 py-2 rounded-pill mb-3">
				Step 1：選擇的店名
			</h4>
		
			<p class="d-flex flex-wrap gap-2">
				<select v-model="userForm.chain" class="form-select w-auto border border-secondary ">
					<option value="">體系</option>
					<option v-for="(item, idx) in chainOpts" :key="idx" :value="item">
						{{ item }}
					</option>
				</select>
				<select v-model="userForm.shop" class="form-select w-auto border border-secondary " :disabled="!userForm.chain">
					<option value="">店名</option>
					<option v-for="(item, idx) in shopOpts" :key="idx" :value="item">
						{{ item }}
					</option>
				</select>
				<input type="text" v-model="userForm.buyer" class="form-control w-auto border border-secondary " placeholder="請輸入訂購人" />
			</p>
		</div>
		<!--體系店名 結束-->


		<!--產品列表搜尋 開始-->
		<div class="border rounded px-2 py-3 mb-3">
			<h4 class="bg-primary text-white fs-6 px-3 py-2 rounded-pill mb-3">Step 2：產品列表搜尋</h4>

			<!--分類選單 1 開始-->
			<section class="btn-group mb-2 d-block" role="group">
				<input type="radio" class="btn-check" id="kind_1" value="洗髮" v-model="userForm.kind" autocomplete="off">
				<label class="btn btn-outline-secondary" for="kind_1">洗髮</label>
			
				<input type="radio" class="btn-check" id="kind_2" value="修護" v-model="userForm.kind" autocomplete="off">
				<label class="btn btn-outline-secondary" for="kind_2">修護</label>
			
				<input type="radio" class="btn-check" id="kind_3" value="造型" v-model="userForm.kind" autocomplete="off">
				<label class="btn btn-outline-secondary" for="kind_3">造型</label>
			
				<input type="radio" class="btn-check" id="kind_4" value="燙髮" v-model="userForm.kind" autocomplete="off">
				<label class="btn btn-outline-secondary" for="kind_4">燙髮</label>
			
				<input type="radio" class="btn-check" id="kind_5" value="染髮" v-model="userForm.kind" autocomplete="off">
				<label class="btn btn-outline-secondary" for="kind_5">染髮</label>
			</section>
			<!--分類選單 1 結束-->
			
			<!--分類選單 2 開始-->
			<section class="btn-group mb-2 d-block" role="group">
				<input type="radio" class="btn-check" id="kind_6" value="護髮" v-model="userForm.kind" autocomplete="off">
				<label class="btn btn-outline-secondary" for="kind_6">護髮</label>
			
				<input type="radio" class="btn-check" id="kind_7" value="頭皮保養" v-model="userForm.kind" autocomplete="off">
				<label class="btn btn-outline-secondary" for="kind_7">頭皮保養</label>
			
				<input type="radio" class="btn-check" id="kind_8" value="專業保養" v-model="userForm.kind" autocomplete="off">
				<label class="btn btn-outline-secondary" for="kind_8">專業保養</label>
			
				<input type="radio" class="btn-check" id="kind_9" value="雜貨耗材" v-model="userForm.kind" autocomplete="off">
				<label class="btn btn-outline-secondary" for="kind_9">雜貨耗材</label>
			</section>
			<!--分類選單 2 結束-->
  
			  
			<!--搜尋框 開始-->
			<p class="mb-4">
				<input type="text" v-model="userForm.keyword" class="form-control border border-secondary  p-2" placeholder="🔍 關鍵字用半形空格隔開">
			</p>
			<!--搜尋框 結束-->
		
			<table class="table table-bordered table-sm table-striped" v-if="searchProductList.length > 0">
				<thead>
					<tr>
						<th class="px-2 py-1 bg-secondary text-white text-start border border-secondary">{{userForm.kind}}產品 ({{searchProductList.length}}筆)</th>
						<th class="px-2 py-1 bg-secondary text-white text-center border border-secondary" style="width:75px;">數量</th>
					</tr>
				</thead>
				<tbody>
					<tr v-for="(item, idx) in searchProductList" :key="idx">
						<td class="py-3">
							<h6 class="mb-1">【{{ item["類型"] }}】{{ item["廠商"] }}{{ item["品名"] }} {{ item["規格"] }}</h6>
							<small class="d-block text-danger">備註：{{ item["備註"] }}</small>
							<small class="d-block text-danger">產編：{{ item["ID"] }}</small>
						</td>
						<td class="py-3 text-center">
							<select v-model.number="tmpCartCount[item.ID]" class="form-select form-select-sm w-100 mb-1 border border-secondary">
								<option v-for="n in 8" :key="n" :value="n">{{ n }}</option>
							</select>
							<button class="btn btn-success btn-sm w-100" @click="fnCartAdd(item)">
								<i class="bi bi-cart-plus me-1"></i>訂購
							  </button>
						</td>
					</tr>
				</tbody>
			</table>
		
			<p v-else class="alert alert-warning py-2 px-3 mb-0 d-flex align-items-center">
				<i class="bi bi-exclamation-triangle-fill me-2"></i>
				目前沒找到，請輸入關鍵字搜尋。
			</p>
		</div>
		<!--產品列表搜尋 結束-->

		
		<!--按鈕 購物車 開始-->
		<button class="btn btn-dark position-fixed d-flex align-items-center justify-content-center border-3 border-white rounded-circle"
			style="width: 60px; height: 60px; right: 16px; bottom: 88px; z-index: 1050;  box-shadow: 0 0 8px 0px rgba(0, 0, 0, 0.5);"
			@click="bShowCart = true">

			<i class="bi bi-cart text-light" style="font-size:28px;"></i>
		
			<span v-if="cartList.length" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
				style="font-size: 0.7rem;">
				{{ cartList.length }}
			</span>
		</button>
		<!--按鈕 購物車 結束-->
		
		
		<!--modal 購物車 開始-->
		<div class="modal fade show d-block" tabindex="-1" v-if="bShowCart" style="background-color: rgba(0,0,0,0.5);">
			<div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
				<div class="modal-content">
		
					<!-- 標題區塊 -->
					<header class="modal-header">
						<h5 class="modal-title"><i class="bi bi-cart me-2"></i>購物車<span v-if="cartList.length" class="badge bg-danger rounded-pill ms-2">
								{{ cartList.length }}
							</span></h5>
						<button type="button" class="btn-close" @click="bShowCart = false"></button>
					</header>
		
					<!-- 內容區塊 -->
					<section class="modal-body">
						<table class="table table-bordered table-sm table-striped" v-if="cartList.length > 0">
							<thead>
								<tr>
									<th class="px-2 py-1 bg-secondary text-white text-start border border-secondary">產品詳情</th>
									<th class="px-2 py-1 bg-secondary text-white text-center border border-secondary"
										style="width:75px;">數量</th>
								</tr>
							</thead>
							<tbody>
								<tr v-for="(item, idx) in cartList" :key="idx">
									<td class="py-3">
										<h6 class="mb-1">【{{ item["類型"] }}】{{ item["廠商"] }}{{ item["品名"] }} {{ item["規格"] }}</h6>
										<small class="d-block text-danger">備註：{{ item["備註"] }}</small>
										<small class="d-block text-danger">產編：{{ item["ID"] }}</small>
									</td>
									<td class="py-3 text-center">
										<input type="number" v-model="item['訂購數量']" min="1" max="50"
											class="form-control form-control-sm text-center mb-1 w-100 border border-secondary">
										<button class="btn btn-danger btn-sm w-100" @click="fnCartDel(item)">
											<i class="bi bi-trash me-1"></i>刪除
										</button>
									</td>
								</tr>
							</tbody>
						</table>
						<p v-else class="alert alert-warning py-2 px-3 mb-2 d-flex align-items-center">
							<i class="bi bi-exclamation-triangle-fill me-2"></i>尚未加入任何商品。
						</p>

						<!--留言 開始-->
						<div class="mb-3">
							<textarea class="form-control" rows="3" v-model="userForm.comment" placeholder="✏️ 留言給站長（選填）"></textarea>
						</div>
						<!--留言 結束-->
					</section>
		
					<!-- 底部操作區 -->
					<footer class="modal-footer">
						<button class="btn btn-warning text-dark" @click="fnCartSubmit">
							<i class="bi bi-clipboard-check me-1"></i>送出訂單
						</button>
						<button class="btn btn-secondary" @click="bShowCart = false">關閉</button>
					</footer>
		
				</div>
			</div>
		</div>
		<!--modal 購物車 結束-->


		<!--modal 成功 callback 開始-->
		<div class="modal fade show d-block" tabindex="-1" v-if="bShowSuccess" style="background-color: rgba(0,0,0,0.5);">
			<div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
				<div class="modal-content">
		
					<!-- 標題區塊 -->
					<header class="modal-header">
						<i class="bi bi-check-circle-fill me-1"></i>成功送出 {{ successList.length }} 項商品
						<button type="button" class="btn-close" @click="bShowSuccess = false; successList = []"></button>
					</header>
		
					<!-- 內容區塊 -->
					<section class="modal-body">
						<table class="table table-bordered table-sm table-striped" v-if="successList.length > 0">
							<thead>
								<tr>
									<th class="px-2 py-1 bg-secondary text-white text-start border border-secondary">產品詳情</th>
									<th class="px-2 py-1 bg-secondary text-white text-center border border-secondary"
										style="width:75px;">數量</th>
								</tr>
							</thead>
							<tbody>
								<tr v-for="(item, idx) in successList" :key="idx">
									<td class="py-3">
										<h6 class="mb-1">{{ item["廠商"] }}{{ item["品名"] }} {{ item["規格"] }}</h6>
									</td>
									<td class="py-3 text-center">{{ item["訂購數量"] }}</td>
								</tr>
							</tbody>
						</table>
					</section>
		
					<!-- 底部操作區 -->
					<footer class="modal-footer">
						<button class="btn btn-secondary" @click="bShowSuccess = false; successList=[];">關閉</button>
					</footer>
		
				</div>
			</div>
		</div>
		<!--modal 成功 callback 結束-->


		<!--按鈕 查詢歷史訂單 開始-->
		<button
			class="btn btn-warning position-fixed d-flex align-items-center justify-content-center border-3 border-white rounded-circle"
			style="width: 60px; height: 60px; right: 16px; bottom: 16px; z-index: 1050; box-shadow: 0 0 8px 0px rgba(0, 0, 0, 0.5);"
			@click="fnHistory">
			<i class="bi bi-clock-history text-dark" style="font-size:28px;"></i>
		</button>
		<!--按鈕 查詢歷史訂單 結束-->


		<!--modal 歷史訂單列表 開始-->
		<div class="modal fade show d-block" tabindex="-1" v-if="bShowHistory" style="background-color: rgba(0,0,0,0.5);">
			<div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
				<div class="modal-content">
		
					<!-- 標題區塊 -->
					<header class="modal-header">
						<i class="bi bi-clock-history me-1"></i>歷史訂單 {{userForm.chain}} {{userForm.shop}}  
						<button type="button" class="btn-close" @click="bShowHistory = false; successList = []"></button>
					</header>
		
					<!-- 內容區塊 -->
					<section class="modal-body">
						<!--表 開始-->
						<div v-if="Object.keys(gSheetData.historyList).length">
							<section v-for="(orderGroup, orderTime) in gSheetData.historyList" :key="orderTime" class="mb-4">
								<table class="table table-bordered table-sm table-striped" v-if="orderGroup.length > 0">
									<thead>
										<tr>
											<th class="px-2 py-1 bg-secondary text-white text-start border border-secondary">
												<i class="bi bi-clock-history me-2"></i>{{ orderTime }} {{orderGroup[0]["訂購人"]}} 訂購
												{{orderGroup.length}}筆 
											</th>
											<th class="px-2 py-1 bg-secondary text-white text-center border border-secondary"
												style="width:75px;">數量</th>
										</tr>
									</thead>
									<tbody>
										<tr v-for="(item, idx) in orderGroup" :key="idx">
											<td class="py-3">
												<h6 class="mb-1">{{ item["廠商"] }}{{ item["品名"] }} {{ item["規格"] }}</h6>
												<small class="d-block text-danger">備註：{{ item["備註"] }}</small>
												<small class="d-block text-danger">產編：{{ item["ID"] }}</small>
												<small class="d-block text-danger">留言：{{ item["留言"] }}</small>
											</td>
											<td class="py-3 text-center">
												{{item["訂購數量"]}}
											</td>
										</tr>
									</tbody>
								</table>
							</section>
						</div>
						<div v-else class="alert alert-warning d-flex align-items-center">
							<i class="bi bi-exclamation-triangle-fill me-2"></i>
							尚無符合條件的歷史訂單。
						  </div>
						<!--表 結束-->
					</section>
		
					<!-- 底部操作區 -->
					<footer class="modal-footer">
						<button class="btn btn-secondary" @click="bShowHistory = false;">關閉</button>
					</footer>
		
				</div>
			</div>
		</div>
		<!--modal 歷史訂單列表 結束-->

		

		<!--loading 開始-->
		<div v-if="bShowLoading"
			class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center"
			style="background-color: rgba(0, 0, 0, 0.6); z-index: 2000;">
			<div class="spinner-border text-light" role="status">
				<span class="visually-hidden">Loading...</span>
			</div>
		</div>
		<!--loading 結束-->

		<!--modal Alert 元件 開始-->
		<div class="modal fade show d-block" tabindex="-1" v-if="alertMsg" style="background-color: rgba(0, 0, 0, 0.5);">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
		
					<!-- 標題區塊 -->
					<div class="modal-header">
						<h5 class="modal-title">系統提示</h5>
						<button type="button" class="btn-close" @click="alertMsg = ''"></button>
					</div>
		
					<!-- 內容文字 -->
					<div class="modal-body">
						<section class="mb-0" v-html="alertMsg"></section>
					</div>
		
					<!-- 底部操作 -->
					<div class="modal-footer">
						<button type="button" class="btn btn-primary" @click="alertMsg = ''">確定</button>
					</div>
		
				</div>
			</div>
		</div>
		<!--modalAlert 元件 結束-->

		
	</div>
	<!--應用程式 結束-->

	<script>
		//訂單 gs 寫入 gsheet
		// cartList       要送出的訂單資料陣列
		// cbStart        傳送前執行（如顯示 loading）
		// cbSuccess      傳送成功時執行（參數為回傳結果）
		// cbError        傳送失敗時執行（參數為錯誤訊息）
		// cbFinally      最後一定會執行（成功或失敗皆會觸發）
		async function fnCart_GScript_GSheet(cartList, { cbStart, cbSuccess, cbError, cbFinally } = {}) {

			//gs
			const WEB_APP_URL = "https://script.google.com/macros/s/AKfycbxURK88YznI6MJ7dnAKwjGkzNFlgM3c-hyCcX3CQJZvpXOuGYqP7GC88n_rQWlEJtYpCw/exec";

			if (cbStart) cbStart();

			console.log('🟡 正在送出訂單...');

			try {
				const response = await fetch(WEB_APP_URL, {
					method: 'POST',
					body: JSON.stringify(cartList)
				});

				if (response.ok) {
					const result = await response.json();

					if (result.status === 'success') {
						console.log('✅ 訂單已成功送出');

						if (cbSuccess) cbSuccess(result);

					} else {
						console.log(`⚠️ 錯誤：${result.message}`);
						if (cbError) cbError(result.message);
					}
				} else {
					const errorText = await response.text();
					console.log(`❌ 伺服器錯誤：${response.status} ${errorText}`);
					if (cbError) cbError(errorText);
				}

			} catch (error) {
				console.log(`🚫 傳送失敗：${error.message}`);
				console.error('Fetch 發生錯誤：', error);
				if (cbError) cbError(error.message);
			} finally {
				if (cbFinally) cbFinally();
			}
		}
	</script>

	<script>
	// 讀取 gsheet csv
	// 統一使用 gid 模式：由 Google Sheet 的發佈 ID 與工作表 gid 取得資料
	// argPublicID    Google Sheet 發佈後的 ID（
	// argGid         工作表的 gid 編號
	// 回傳值         解析後的資料陣列，每筆為物件
	async function fnFetchSheetCSV(argPublicID, argGid) {
		const url = `https://docs.google.com/spreadsheets/d/e/${argPublicID}/pub?output=csv&gid=${argGid}`;

		try {
			const res = await fetch(url);
			const csvText = await res.text();

			const rows = csvText.trim().split("\n").map(row => row.split(","));
			const headers = rows[0];

			const json = rows.slice(1).map(row => {
				const obj = {};
				row.forEach((val, idx) => {
					const cleanKey = headers[idx].replace(/[\r\n]+/g, "").trim();
					const cleanVal = val.replace(/[\r\n]+/g, "").trim();
					obj[cleanKey] = cleanVal;
				});
				return obj;
			});

			return json;

		} catch (err) {
			console.error("❌ 無法讀取 Google Sheet（gid）資料：", err);
			return [];
		}
	}
	</script>

	<script>
	// 讀取 歷史訂單 gsheet csv
	// sheetUrl       Google Sheet 匯出 CSV 的完整網址（含 gid）
	// 回傳值         排序後的資料陣列，每筆為物件；錯誤時回傳空陣列 []
	async function fnFetchSheetHistoryCSV(sheetUrl) {
		try {
			const res = await fetch(sheetUrl);
			const csvText = await res.text();

			const rows = csvText.trim().split("\n").map(row => row.split(","));

			if (rows.length < 6) {
				console.warn("❗ 資料行數不足");
				return [];
			}

			// 第 5 列為表頭
			const headers = rows[4].map(h => h.trim().replace(/[\r\n]+/g, ""));

			// 第 6 列開始才是有效資料
			const dataRows = rows.slice(5);

			const allItems = dataRows.map(row => {
				const item = {};
				row.forEach((val, idx) => {
					const key = headers[idx] || `未命名欄位${idx}`;
					item[key] = val.trim().replace(/[\r\n]+/g, "");
				});
				return item;
			});

			// 依訂單時間排序：新 → 舊
			allItems.sort((a, b) => {
				const tA = new Date(a["訂單時間"]);
				const tB = new Date(b["訂單時間"]);
				return tB - tA;
			});

			return allItems;

		} catch (err) {
			console.error("❌ 無法讀取 Google Sheet 資料：", err);
			return [];
		}
	}
	</script>



	<script type="module">
		import { createApp, ref, reactive, computed, onMounted, watch, watchEffect } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js';

		const app = createApp({
			setup() {

				//由發佈到網路取得 argPublicID 資料表名稱sheetName
				const publicID = "2PACX-1vSciyoqom00dwm7X-naII5bMxSygPSnzvTZMwhcpLtIenmR682WEkolx6qbJD-ERnmmHkupVEs2RXMa";

				//gsheet fetch csv
				const gSheetData = reactive({
					productList: [], //產品列表
					chainList: [], //連鎖 店名
					noteList:[], //網頁維護、公告
					historyList:[], //歷史訂單
				});


				//以商品 ID 為 key、記錄目前輸入數量
				const tmpCartCount = reactive({});

				// 加入購物車
				const fnCartAdd = (item) => {
					const qty = parseInt(tmpCartCount[item["ID"]] || 0);

					if (!qty || qty <= 0) {
						alertMsg.value = "<p>❗請輸入正確的訂購數量</p>";
						return;
					}

					const existing = cartList.value.find(o => o["ID"] === item["ID"]);

					if (existing) {
						existing["訂購數量"] += qty;
					} else {
						cartList.value.push({
							...item,
							"訂購數量": qty,
						});
					}

					alertMsg.value = `<p>✅ 已加入訂單：</p> <p>${item.品名} × ${qty}</p>`;

					tmpCartCount[item["ID"]] = ""; // 清空輸入欄
				};

				


				// 購物車資料
				const cartList = ref([
				
				]);

				/*
				{ "ID": "fruit_1", "廠商": "果然好", "品名": "蘋果", "規格": "1箱", "訂購數量": 3, "類型": "削皮", "備註": "有機" },
				{ "ID": "fruit_2", "廠商": "鮮果樂", "品名": "香蕉", "規格": "2串", "訂購數量": 5, "類型": "果乾", "備註": "第三季到貨" },
				{ "ID": "meat_1", "廠商": "大口肉品", "品名": "牛肉片", "規格": "500g", "訂購數量": 2, "類型": "生食", "備註": "" },
				{ "ID": "meat_2", "廠商": "新鮮肉舖", "品名": "雞腿排", "規格": "1包", "訂購數量": 4, "類型": "生食", "備註": "" },
				{ "ID": "meat_3", "廠商": "老張肉舖", "品名": "豬絞肉", "規格": "300g", "訂購數量": 3, "類型": "生食", "備註": "真空冷藏" },
				*/

				// 顯示 loading
				const bShowLoading = ref(false);

				// 顯示 購物車
				const bShowCart = ref(false);

				// 顯示 成功清單
				const bShowSuccess = ref(false);

				// 顯示 歷史訂單
				const bShowHistory = ref(false);

				
				//Alert 元件。塞文字進去就會show
				const alertMsg = ref("");

				//訂單寫入 gsheet 成功 callback 清單
				const successList = ref([]);

				//使用者填寫
				const userForm = reactive({
					chain: "", //連鎖
					shop: "", //店
					buyer:"", //訂購人
					kind:"洗髮", //產品大類
					keyword:"", //搜產品
					comment:"" //留言
				});

				
				//記錄 連鎖 店 訂購人
				const userFormStorage = {
					key: "userFormStorage_03",

					fnRead() {
						const saved = JSON.parse(localStorage.getItem(this.key));
						if (saved) {
							userForm.chain = saved.chain || "";
							userForm.shop = saved.shop || "";
							userForm.buyer = saved.buyer || "";
						}
					},

					fnSave() {
						const data = {
							chain: userForm.chain,
							shop: userForm.shop,
							buyer: userForm.buyer
						};
						localStorage.setItem(this.key, JSON.stringify(data));
					}
				};


				// gid 對照表 因為筆數過多需分類載入
				const productGidMap = {
					"洗髮": "281779668",
					"修護": "1839910507",
					"造型": "48717049",
					"燙髮": "165622397",
					"染髮": "975624467",
					"護髮": "1260117740",
					"頭皮保養": "1633371124",
					"專業保養": "771666379",
					"雜貨耗材": "237824708"
				};


				//computed 體系選項
				const chainOpts = computed(() => {
					return gSheetData.chainList
						.filter(item => item["PID"] === "")
						.map(item => item["NAME"]);
				});

				//computed 依據體系選出對應的店名選項
				const shopOpts = computed(() => {
					return gSheetData.chainList
						.filter(item => item["PID"] === userForm.chain)
						.map(item => item["NAME"]);
				});

				//computed 產品搜尋
				const searchProductList = computed(() => {
					if (!userForm.keyword.trim()) return gSheetData.productList;

					const words = userForm.keyword.replace(/\u3000/g, " ").trim().toLowerCase().split(/\s+/);

					return gSheetData.productList.filter(item => {
						const haystack = `${item["ID"]}${item["廠商"]}${item["品名"]}${item["規格"]}${item["類型"]}${item["備註"]}`
							.replace(/\u3000/g, " ")  // 處理 haystack 全形空白
							.toLowerCase();
						return words.every(word => haystack.includes(word));
					});
				});

				// 購物車 刪除商品
				const fnCartDel = (item) => {
					const idx = cartList.value.findIndex(o => o.ID === item.ID);
					if (idx !== -1) {
						cartList.value.splice(idx, 1);
					}
				};

				// 購物車 傳送訂單
				const fnCartSubmit = () => {

					// 驗證 連鎖 店名 訂購人
					if (!userForm.chain || !userForm.shop || !userForm.buyer) {
						bShowCart.value = false;
						alertMsg.value = "<p>🚫『體系』『店名』『訂購人』</p><p>為必填欄位，請確認後再送出訂單！</p>";
						return;
					}

					// 驗證有單
					if (cartList.value.length === 0) {
						bShowCart.value = false;
						alertMsg.value = "<p>🚫 沒有商品可送出。</p>";
						return;
					}

					const timeUTC = new Date().toISOString(); // 機器用 UTC 時間
					const timeLocal = new Date().toLocaleString(); // 在地時間

					//加工資料
					const cartWithTime = cartList.value.map(item => ({
						...item,
						"訂單時間": timeLocal,
						"標準時間": timeUTC, 
						"體系": userForm.chain,
						"店名": userForm.shop,
						"訂購人": userForm.buyer,
					}));

					// 第一筆 加留言
					if (userForm.comment && cartWithTime.length > 0) {
						cartWithTime[0]["留言"] = userForm.comment;
					}

					// 寫入雲端。完成後callback
					fnCart_GScript_GSheet(cartWithTime, {
						cbStart: () => {
							bShowLoading.value = true;
						},
						cbSuccess: (res) => {
							console.log("✅ cbSuccess writtenData對應：", res);

							//寫入成功清單 writtenData 是照sheet排序對應，需手動對應
							if (res && Array.isArray(res.writtenData)) {
								successList.value = res.writtenData.map(row => ({
									"廠商": row[5],
									"品名": row[6],
									"規格": row[8],
									"訂購數量": row[7]
								}));
								bShowSuccess.value = true;
							}
							
							cartList.value = []; // 清空購物車
							Object.keys(tmpCartCount).forEach(key => delete tmpCartCount[key]); // 清空數量
							userForm.comment = "" // 清空留言
						},
						cbFinally: () => {
							bShowCart.value = false
							bShowLoading.value = false;
						}
					});
				};

				//讀取歷史訂單
				const fnHistory = async () => {
					
					if (!userForm.chain || !userForm.shop) {
						alertMsg.value = "<p>⚠️ 請先選擇『體系』與『店名』後，才能查詢歷史訂單。</p>";
						return;
					}

					const rawList = await fnFetchSheetHistoryCSV("https://docs.google.com/spreadsheets/d/1DZbJEi3lDsnOO2uA9dUDNYoyUYvGi8ULOJVGkfyzy88/export?format=csv&gid=0");

					const tmpObj = {};

					for (const item of rawList) {
						if (item["體系"] !== userForm.chain || item["店名"] !== userForm.shop) continue;

						const orderTime = item["訂單時間"] || "未指定時間";

						if (!tmpObj[orderTime]) {
							tmpObj[orderTime] = [];
						}
						tmpObj[orderTime].push(item);
					}

					gSheetData.historyList = tmpObj;
					bShowHistory.value = true;
				};



				// watch 使用者輸入變更時，體系重選清空店名
				watch(()=>userForm.chain, (newVal, oldVal)=>{
					if (oldVal && newVal !== oldVal && userForm.shop) userForm.shop = "";
				});

				// watch 記錄 連鎖 店 訂購人
				watch( 
					() => [userForm.chain, userForm.shop, userForm.buyer], 
					() => { userFormStorage.fnSave() }
				);

				// watch 產品分類 動態載教
				watch(()=>userForm.kind, async (newVal, oldVal)=>{
					
					//loading
					bShowLoading.value = true;

					// 產品表
					gSheetData.productList = await fnFetchSheetCSV(publicID, productGidMap[userForm.kind]);

					//loading
					bShowLoading.value = false;
				});

				// onMounted
				onMounted(async () => {

					//loading
					bShowLoading.value = true;

					// 網頁文案
					gSheetData.noteList = await fnFetchSheetCSV(publicID, "418186417");

					// 設定 HTML 網頁標題
					if (gSheetData.noteList.length && gSheetData.noteList[0]["TITLE_1"]) {
						document.title = gSheetData.noteList[0]["TITLE_1"];
					}

					// 體系表
					gSheetData.chainList = await fnFetchSheetCSV(publicID, "679743566");

					// 產品表
					gSheetData.productList = await fnFetchSheetCSV(publicID, productGidMap[userForm.kind]);

					//loading
					bShowLoading.value = false;

					//讀取 記錄 連鎖 店 訂購人
					userFormStorage.fnRead();
					
				});

				return {
					// 購物車相關
					cartList,           // 購物車清單
					successList,        // 成功送出的訂單清單
					tmpCartCount,       // 每個商品的暫存選擇數量
					fnCartAdd,          // 加入購物車
					fnCartDel,          // 從購物車移除
					fnCartSubmit,       // 提交訂單

					// 顯示控制
					bShowCart,          // 顯示購物車 Modal
					bShowSuccess,       // 顯示成功送出 Modal
					bShowHistory,       // 顯示歷史訂單 Modal
					bShowLoading,       // 顯示 Loading Spinner
					alertMsg,           // 系統提示訊息（Alert Modal）

					// 資料來源與查詢結果
					gSheetData,            // 所有後台資料（產品列表、體系店名、公告、歷史訂單）
					searchProductList,  // 搜尋後的產品清單（computed）

					// 使用者輸入表單
					userForm,           // 使用者填寫的表單資料（體系、店名、訂購人等）
					chainOpts,          // 體系選項（computed）
					shopOpts,           // 店名選項（computed）

					// 歷史訂單
					fnHistory           // 查詢歷史訂單
				};
			}
		});

		app.mount("#app");
	</script>

</body>

</html>